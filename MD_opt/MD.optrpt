Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.5.274 Build 20180823

Compiler options: -g -Ofast -qopt-report3 -c -o MD.o

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: evolve(int, double)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (evolve(int, double)) [1] MD.c(15,35)
  -> EXTERN: (24,3) printf(const char *__restrict__, ...)
  -> EXTERN: (25,3) printf(const char *__restrict__, ...)
  -> EXTERN: (29,3) memset(void *, int, size_t)
  -> EXTERN: (32,4) visc_force(int, double *, double *, double *)
  -> EXTERN: (38,4) wind_force(int, double *, double *, double)
  -> EXTERN: (47,4) add_norm(int, double *, double *)
  -> EXTERN: (57,7) force(double, double, double)
  -> EXTERN: (76,4) add_norm(int, double *, double *)
  -> EXTERN: (95,8) force(double, double, double)
  -> EXTERN: (97,8) force(double, double, double)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at MD.c(23,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at MD.c(31,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   LOOP END

   LOOP BEGIN at MD.c(37,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   LOOP END

   LOOP BEGIN at MD.c(46,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   LOOP END

   LOOP BEGIN at MD.c(50,3)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at MD.c(50,3)
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 45 
      remark #15477: vector cost: 17.000 
      remark #15478: estimated potential speedup: 2.630 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=512
   LOOP END

   LOOP BEGIN at MD.c(50,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at MD.c(50,3)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at MD.c(54,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between call:force(double, double, double) (57:7) and call:force(double, double, double) (57:7)

      LOOP BEGIN at MD.c(55,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      LOOP END
   LOOP END

   LOOP BEGIN at MD.c(62,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between delta_pos[l][k] (65:6) and delta_pos[l][k] (65:6)
      remark #25015: Estimate of max trip count of loop=3

      LOOP BEGIN at MD.c(63,4)
      <Distributed chunk1>
         remark #25426: Loop Distributed (2 way) 
         remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
         remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between delta_pos[l][k] (65:6) and pos[l][i] (65:6)

         LOOP BEGIN at MD.c(64,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed FLOW dependence between delta_pos[l][k] (65:6) and pos[l][i] (65:6)
            remark #25439: unrolled with remainder by 2  
            remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
         LOOP END

         LOOP BEGIN at MD.c(64,5)
         <Remainder>
            remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
         LOOP END
      LOOP END

      LOOP BEGIN at MD.c(63,4)
      <Distributed chunk2>
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 1 
         remark #15477: vector cost: 0.500 
         remark #15478: estimated potential speedup: 1.990 
         remark #15488: --- end vector cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      LOOP END
   LOOP END

   LOOP BEGIN at MD.c(72,3)
      remark #25408: memset generated
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   LOOP END

   LOOP BEGIN at MD.c(75,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   LOOP END

   LOOP BEGIN at MD.c(78,3)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at MD.c(78,3)
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 45 
      remark #15477: vector cost: 17.000 
      remark #15478: estimated potential speedup: 2.640 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=4193280
   LOOP END

   LOOP BEGIN at MD.c(78,3)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at MD.c(86,3)
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 3 ) --> ( 1 3 2 ) 
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between *(radius+i*8) (88:5) and f[l][j] (96:6)
      remark #25015: Estimate of max trip count of loop=3

      LOOP BEGIN at MD.c(87,5)
         remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
         remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between *(radius+i*8) (88:5) and f[l][j] (96:6)

         LOOP BEGIN at MD.c(91,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between *(delta_r+k*8) (93:6) and f[l][j] (96:6)
            remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at MD.c(108,3)
      remark #25445: Loop Interchange not done due to: Data Dependencies
      remark #25446: Dependencies found between following statements:  [From_Line# -> (Dependency Type) To_Line#]
      remark #25447: Dependence found between following statements:  [110 -> (Output) 111]
      remark #25447: Dependence found between following statements:  [110 -> (Flow) 111]
      remark #25447: Dependence found between following statements:  [110 -> (Anti) 111]
      remark #25447: Dependence found between following statements:  [110 -> (Flow) 110]
      remark #25447: Dependence found between following statements:  [110 -> (Anti) 110]
      remark #25447: Dependence found between following statements:  [111 -> (Flow) 111]
      remark #25447: Dependence found between following statements:  [111 -> (Anti) 111]
      remark #25447: Dependence found between following statements:  [111 -> (Output) 110]
      remark #25447: Dependence found between following statements:  [111 -> (Anti) 110]
      remark #25447: Dependence found between following statements:  [111 -> (Flow) 110]
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between pos[j][i] (110:5) and velo[j][i] (111:5)

      LOOP BEGIN at MD.c(109,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between pos[j][i] (110:5) and velo[j][i] (111:5)
         remark #25436: completely unrolled by 3  
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

MD.c(29,3):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
MD.c(29,3):remark #34026: call to memset implemented as a call to optimized library version
MD.c(72,3):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
MD.c(72,3):remark #34026: call to memset implemented as a call to optimized library version
MD.c(15,35):remark #34051: REGISTER ALLOCATION : [evolve] MD.c:15

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :     239
            Global    :      71
            Local     :     168
        Regenerable   :      18
        Spilled       :      15
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      72 bytes*
            Reads     :      13 [5.96e+03 ~ 0.2%]
            Writes    :      10 [3.57e+03 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
