Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.5.274 Build 20180823

Compiler options: -g -Ofast -qopt-report5 -c -o MD.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: evolve(int, double)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (evolve(int, double)) [1/2=50.0%] MD.c(15,35)
  -> EXTERN: (24,3) printf(const char *__restrict__, ...)
  -> EXTERN: (25,3) printf(const char *__restrict__, ...)
  -> EXTERN: (29,3) memset(void *, int, size_t)
  -> INLINE (MANUAL): (70,7) force(double, double, double) (isz = 2) (sz = 12)
  -> EXTERN: (89,4) add_norm(int, double *, double *)
  -> INLINE (MANUAL): (108,8) force(double, double, double) (isz = 2) (sz = 12)
  -> INLINE (MANUAL): (110,8) force(double, double, double) (isz = 2) (sz = 12)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at MD.c(23,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at MD.c(35,4)
      remark #25461: Imperfect Loop Unroll-Jammed by 3   (pre-vector) 
      remark #15388: vectorization support: reference f[j][i] has aligned access   [ MD.c(36,5) ]
      remark #15388: vectorization support: reference vis[i] has aligned access   [ MD.c(36,16) ]
      remark #15388: vectorization support: reference velo[j][i] has aligned access   [ MD.c(36,25) ]
      remark #15388: vectorization support: reference f[j][i] has aligned access   [ MD.c(36,5) ]
      remark #15388: vectorization support: reference vis[i] has aligned access   [ MD.c(36,16) ]
      remark #15388: vectorization support: reference velo[j][i] has aligned access   [ MD.c(36,25) ]
      remark #15388: vectorization support: reference f[j][i] has aligned access   [ MD.c(36,5) ]
      remark #15388: vectorization support: reference vis[i] has aligned access   [ MD.c(36,16) ]
      remark #15388: vectorization support: reference velo[j][i] has aligned access   [ MD.c(36,25) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 6 
      remark #15449: unmasked aligned unit stride stores: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 26 
      remark #15477: vector cost: 10.500 
      remark #15478: estimated potential speedup: 2.470 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=512
   LOOP END

   LOOP BEGIN at MD.c(44,4)
      remark #25461: Imperfect Loop Unroll-Jammed by 3   (pre-vector) 
      remark #15388: vectorization support: reference f[j][i] has aligned access   [ MD.c(45,5) ]
      remark #15388: vectorization support: reference f[j][i] has aligned access   [ MD.c(45,5) ]
      remark #15388: vectorization support: reference vis[i] has aligned access   [ MD.c(45,18) ]
      remark #15388: vectorization support: reference f[j][i] has aligned access   [ MD.c(45,5) ]
      remark #15388: vectorization support: reference f[j][i] has aligned access   [ MD.c(45,5) ]
      remark #15388: vectorization support: reference vis[i] has aligned access   [ MD.c(45,18) ]
      remark #15388: vectorization support: reference f[j][i] has aligned access   [ MD.c(45,5) ]
      remark #15388: vectorization support: reference f[j][i] has aligned access   [ MD.c(45,5) ]
      remark #15388: vectorization support: reference vis[i] has aligned access   [ MD.c(45,18) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.444
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 6 
      remark #15449: unmasked aligned unit stride stores: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 33 
      remark #15477: vector cost: 13.500 
      remark #15478: estimated potential speedup: 2.440 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=2048
   LOOP END

   LOOP BEGIN at MD.c(58,4)
      remark #25461: Imperfect Loop Unroll-Jammed by 3   (pre-vector) 
      remark #15388: vectorization support: reference r[k] has aligned access   [ MD.c(59,5) ]
      remark #15388: vectorization support: reference r[k] has aligned access   [ MD.c(59,5) ]
      remark #15388: vectorization support: reference pos[i][k] has aligned access   [ MD.c(59,14) ]
      remark #15388: vectorization support: reference pos[i][k] has aligned access   [ MD.c(59,26) ]
      remark #15388: vectorization support: reference r[k] has aligned access   [ MD.c(59,5) ]
      remark #15388: vectorization support: reference r[k] has aligned access   [ MD.c(59,5) ]
      remark #15388: vectorization support: reference pos[i][k] has aligned access   [ MD.c(59,14) ]
      remark #15388: vectorization support: reference pos[i][k] has aligned access   [ MD.c(59,26) ]
      remark #15388: vectorization support: reference r[k] has aligned access   [ MD.c(59,5) ]
      remark #15388: vectorization support: reference r[k] has aligned access   [ MD.c(59,5) ]
      remark #15388: vectorization support: reference pos[i][k] has aligned access   [ MD.c(59,14) ]
      remark #15388: vectorization support: reference pos[i][k] has aligned access   [ MD.c(59,26) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 9 
      remark #15449: unmasked aligned unit stride stores: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 32 
      remark #15477: vector cost: 12.000 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=512
   LOOP END

   LOOP BEGIN at MD.c(63,3)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at MD.c(63,3)
      remark #15388: vectorization support: reference r[k] has aligned access   [ MD.c(64,4) ]
      remark #15388: vectorization support: reference r[k] has aligned access   [ MD.c(64,16) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.074
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 45 
      remark #15477: vector cost: 17.000 
      remark #15478: estimated potential speedup: 2.630 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=512
   LOOP END

   LOOP BEGIN at MD.c(63,3)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference r[k] has aligned access   [ MD.c(64,4) ]
      remark #15388: vectorization support: reference r[k] has aligned access   [ MD.c(64,16) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.263
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at MD.c(63,3)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at MD.c(67,3)
      remark #25101: Loop Interchange not done due to: Original Order seems proper
      remark #25452: Original Order found to be proper, but by a close margin
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between f[l][i] (69:5) and f[l][i] (69:5)
      remark #15346: vector dependence: assumed OUTPUT dependence between f[l][i] (69:5) and f[l][i] (69:5)

      LOOP BEGIN at MD.c(68,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between f[l][i] (69:5) and mass[i] (69:5)
         remark #15346: vector dependence: assumed ANTI dependence between mass[i] (69:5) and f[l][i] (69:5)
      LOOP END
   LOOP END

   LOOP BEGIN at MD.c(75,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between delta_pos[l][k] (78:6) and delta_pos[l][k] (78:6)
      remark #15346: vector dependence: assumed OUTPUT dependence between delta_pos[l][k] (78:6) and delta_pos[l][k] (78:6)
      remark #25015: Estimate of max trip count of loop=3

      LOOP BEGIN at MD.c(76,4)
      <Distributed chunk1>
         remark #25426: Loop Distributed (2 way) 
         remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
         remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between delta_pos[l][k] (78:6) and pos[l][i] (78:6)
         remark #15346: vector dependence: assumed ANTI dependence between pos[l][i] (78:6) and delta_pos[l][k] (78:6)

         LOOP BEGIN at MD.c(77,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed FLOW dependence between delta_pos[l][k] (78:6) and pos[l][i] (78:6)
            remark #15346: vector dependence: assumed ANTI dependence between pos[l][i] (78:6) and delta_pos[l][k] (78:6)
            remark #25439: unrolled with remainder by 2  
            remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
         LOOP END

         LOOP BEGIN at MD.c(77,5)
         <Remainder>
            remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
         LOOP END
      LOOP END

      LOOP BEGIN at MD.c(76,4)
      <Distributed chunk2>
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.500
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 1 
         remark #15477: vector cost: 0.500 
         remark #15478: estimated potential speedup: 1.990 
         remark #15488: --- end vector cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      LOOP END
   LOOP END

   LOOP BEGIN at MD.c(85,3)
      remark #25408: memset generated
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   LOOP END

   LOOP BEGIN at MD.c(88,3)
      remark #15382: vectorization support: call to function add_norm(int, double *, double *) cannot be vectorized   [ MD.c(89,4) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END

   LOOP BEGIN at MD.c(91,3)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at MD.c(91,3)
      remark #15388: vectorization support: reference delta_r[k] has aligned access   [ MD.c(92,4) ]
      remark #15388: vectorization support: reference delta_r[k] has aligned access   [ MD.c(92,22) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.294
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 45 
      remark #15477: vector cost: 17.000 
      remark #15478: estimated potential speedup: 2.640 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=4193280
   LOOP END

   LOOP BEGIN at MD.c(91,3)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at MD.c(99,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between radius[i] (101:5) and f[l][j] (109:6)
      remark #15346: vector dependence: assumed FLOW dependence between f[l][j] (109:6) and radius[i] (101:5)
      remark #25015: Estimate of max trip count of loop=3

      LOOP BEGIN at MD.c(100,5)
      <Distributed chunk1>
         remark #25426: Loop Distributed (2 way) 
         remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
         remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between radius[i] (101:5) and f[l][j] (109:6)
         remark #15346: vector dependence: assumed FLOW dependence between f[l][j] (109:6) and radius[i] (101:5)

         LOOP BEGIN at MD.c(104,5)
         <Distributed chunk1>
            remark #25426: Loop Distributed (2 way) 
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15305: vectorization support: vector length 4
            remark #15399: vectorization support: unroll factor set to 4
            remark #15309: vectorization support: normalized vectorization overhead 0.750
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 1 
            remark #15477: vector cost: 0.250 
            remark #15478: estimated potential speedup: 3.890 
            remark #15488: --- end vector cost summary ---
            remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
         LOOP END

         LOOP BEGIN at MD.c(104,5)
         <Distributed chunk2>
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between delta_r[k] (106:6) and f[l][j] (109:6)
            remark #15346: vector dependence: assumed FLOW dependence between f[l][j] (109:6) and delta_r[k] (106:6)
         LOOP END
      LOOP END

      LOOP BEGIN at MD.c(100,5)
      <Distributed chunk2>
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.500
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 1 
         remark #15477: vector cost: 0.500 
         remark #15478: estimated potential speedup: 1.990 
         remark #15488: --- end vector cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      LOOP END
   LOOP END

   LOOP BEGIN at MD.c(121,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between pos[j][i] (123:5) and velo[j][i] (124:5)
      remark #15346: vector dependence: assumed OUTPUT dependence between velo[j][i] (124:5) and pos[j][i] (123:5)

      LOOP BEGIN at MD.c(122,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between pos[j][i] (123:5) and velo[j][i] (124:5)
         remark #15346: vector dependence: assumed OUTPUT dependence between velo[j][i] (124:5) and pos[j][i] (123:5)
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

MD.c(29,3):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
MD.c(29,3):remark #34026: call to memset implemented as a call to optimized library version
MD.c(85,3):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
MD.c(85,3):remark #34026: call to memset implemented as a call to optimized library version
MD.c(15,35):remark #34051: REGISTER ALLOCATION : [evolve] MD.c:15

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   27[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm11]
        
    Routine temporaries
        Total         :     313
            Global    :      76
            Local     :     237
        Regenerable   :      15
        Spilled       :      15
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      72 bytes*
            Reads     :      11 [5.99e+02 ~ 0.0%]
            Writes    :      11 [5.16e+02 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: force(double, double, double)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (force(double, double, double)) [2/2=100.0%] MD.c(138,55)


    Report from: Code generation optimizations [cg]

MD.c(138,55):remark #34051: REGISTER ALLOCATION : [force] MD.c:138

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ zmm0-zmm3]
        
    Routine temporaries
        Total         :      17
            Global    :       0
            Local     :      17
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
