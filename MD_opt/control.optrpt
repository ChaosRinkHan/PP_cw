Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.5.274 Build 20180823

Compiler options: -g -Ofast -qopt-report3 -c -o control.o

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1] control.c(15,34)
  -> INLINE (MANUAL): (29,11) atoi(const char *)
    -> EXTERN: /usr/include/stdlib.h:(280,16) strtol(const char *__restrict__, char **__restrict__, int)
  -> EXTERN: (35,6) calloc(size_t, size_t)
  -> EXTERN: (36,12) calloc(size_t, size_t)
  -> EXTERN: (37,9) calloc(size_t, size_t)
  -> EXTERN: (38,11) calloc(size_t, size_t)
  -> EXTERN: (39,8) calloc(size_t, size_t)
  -> EXTERN: (40,9) calloc(size_t, size_t)
  -> EXTERN: (41,11) calloc(size_t, size_t)
  -> EXTERN: (42,12) calloc(size_t, size_t)
  -> EXTERN: (43,17) calloc(size_t, size_t)
  -> EXTERN: (56,7) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (59,3) perror(const char *)
  -> EXTERN: (60,3) exit(int)
  -> EXTERN: (64,3) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (69,2) fclose(FILE *)
  -> INLINE: (75,11) second()
    -> EXTERN: (108,2) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> INLINE: (77,11) second()
    -> EXTERN: (108,2) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (78,3) evolve(int, double)
  -> INLINE: (79,10) second()
    -> EXTERN: (108,2) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (80,3) printf(const char *__restrict__, ...)
  -> EXTERN: (81,3) printf(const char *__restrict__, ...)
  -> EXTERN: (84,3) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (85,9) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (88,4) perror(const char *)
  -> EXTERN: (89,4) exit(int)
  -> EXTERN: (93,4) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (98,3) fclose(FILE *)
  -> INLINE: (100,10) second()
    -> EXTERN: (108,2) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (101,2) printf(const char *__restrict__, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at control.c(45,2)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 23 
   remark #15477: vector cost: 24.000 
   remark #15478: estimated potential speedup: 0.760 
   remark #15487: type converts: 4 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at control.c(63,2)
   remark #15527: loop was not vectorized: function call to fscanf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ control.c(64,3) ]
LOOP END

LOOP BEGIN at control.c(76,2)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ control.c(89,4) ]

   LOOP BEGIN at control.c(92,3)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ control.c(93,4) ]
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

control.c(15,34):remark #34051: REGISTER ALLOCATION : [main] control.c:15

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     205
            Global    :      55
            Local     :     150
        Regenerable   :      73
        Spilled       :       7
        
    Routine stack
        Variables     :     180 bytes*
            Reads     :      10 [1.62e+01 ~ 0.0%]
            Writes    :       2 [2.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       3 [3.70e+00 ~ 0.0%]
            Writes    :       3 [4.81e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: second()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (second()) [3] control.c(105,17)
  -> EXTERN: (108,2) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)


    Report from: Code generation optimizations [cg]

control.c(105,17):remark #34051: REGISTER ALLOCATION : [second] control.c:105

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rsi rdi zmm0-zmm1]
        
    Routine temporaries
        Total         :      15
            Global    :       6
            Local     :       9
        Regenerable   :       4
        Spilled       :       0
        
    Routine stack
        Variables     :      24 bytes*
            Reads     :       2 [2.00e+00 ~ 9.1%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
