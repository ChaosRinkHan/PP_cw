Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.5.274 Build 20180823

Compiler options: -g -Ofast -qopt-report5 -c -o util.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: visc_force(int, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (visc_force(int, double *, double *, double *)) [1/3=33.3%] util.c(3,70)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at util.c(7,2)
   remark #15388: vectorization support: reference f[i] has aligned access   [ util.c(8,3) ]
   remark #15388: vectorization support: reference vis[i] has aligned access   [ util.c(8,11) ]
   remark #15388: vectorization support: reference velo[i] has aligned access   [ util.c(8,20) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 2.510 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at util.c(7,2)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference f[i] has aligned access   [ util.c(8,3) ]
   remark #15388: vectorization support: reference vis[i] has aligned access   [ util.c(8,11) ]
   remark #15388: vectorization support: reference velo[i] has aligned access   [ util.c(8,20) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.769
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at util.c(7,2)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

util.c(3,70):remark #34051: REGISTER ALLOCATION : [visc_force] util.c:3

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r11 zmm0-zmm3]
        
    Routine temporaries
        Total         :      51
            Global    :      22
            Local     :      29
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: wind_force(int, double *, double *, double)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (wind_force(int, double *, double *, double)) [2/3=66.7%] util.c(11,61)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at util.c(13,2)
<Peeled loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at util.c(13,2)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15388: vectorization support: reference f[i] has aligned access   [ util.c(14,3) ]
   remark #15388: vectorization support: reference f[i] has aligned access   [ util.c(14,10) ]
   remark #15388: vectorization support: reference vis[i] has aligned access   [ util.c(14,17) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 10 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 2.410 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at util.c(13,2)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at util.c(13,2)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15388: vectorization support: reference f[i] has aligned access   [ util.c(14,3) ]
   remark #15388: vectorization support: reference f[i] has aligned access   [ util.c(14,10) ]
   remark #15389: vectorization support: reference vis[i] has unaligned access   [ util.c(14,17) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
LOOP END

LOOP BEGIN at util.c(13,2)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at util.c(13,2)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

util.c(11,61):remark #34051: REGISTER ALLOCATION : [wind_force] util.c:11

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rsi rdi r8-r9 zmm0-zmm9]
        
    Routine temporaries
        Total         :     104
            Global    :      28
            Local     :      76
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: add_norm(int, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (add_norm(int, double *, double *)) [3/3=100.0%] util.c(17,48)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at util.c(19,2)
<Peeled loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at util.c(19,2)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15388: vectorization support: reference r[k] has aligned access   [ util.c(20,3) ]
   remark #15388: vectorization support: reference r[k] has aligned access   [ util.c(20,3) ]
   remark #15388: vectorization support: reference delta[k] has aligned access   [ util.c(20,12) ]
   remark #15388: vectorization support: reference delta[k] has aligned access   [ util.c(20,23) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.438
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 2.650 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at util.c(19,2)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at util.c(19,2)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15388: vectorization support: reference r[k] has aligned access   [ util.c(20,3) ]
   remark #15388: vectorization support: reference r[k] has aligned access   [ util.c(20,3) ]
   remark #15389: vectorization support: reference delta[k] has unaligned access   [ util.c(20,12) ]
   remark #15389: vectorization support: reference delta[k] has unaligned access   [ util.c(20,23) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.889
LOOP END

LOOP BEGIN at util.c(19,2)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at util.c(19,2)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

util.c(17,48):remark #34051: REGISTER ALLOCATION : [add_norm] util.c:17

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r9 zmm0-zmm3]
        
    Routine temporaries
        Total         :      85
            Global    :      25
            Local     :      60
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
