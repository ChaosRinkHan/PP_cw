--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         48234496 B, 64 B, 23-way associative
Command:          ./MD 4
Data file:        report/cachegrind.out
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
            Ir  I1mr  ILmr            Dr        D1mr        DLmr            Dw       D1mw       DLmw 
--------------------------------------------------------------------------------
13,869,905,064 2,125 2,093 3,039,730,634 374,722,738 209,825,727 2,920,446,418 83,959,494 83,930,143  PROGRAM TOTALS

--------------------------------------------------------------------------------
           Ir I1mr ILmr            Dr        D1mr        DLmr            Dw       D1mw       DLmw  file:function
--------------------------------------------------------------------------------
8,963,897,945  102  102 2,350,284,520 269,659,473 104,969,140 1,510,502,555 62,899,255 62,899,215  /lustre/home/d171/s1898201/PP_cw/MD_steps/s3_aligned/MD.c:evolve
3,105,833,220   18   18   587,960,340 105,005,315 104,839,695       327,680     30,720      1,536  /lustre/home/d171/s1898201/PP_cw/MD_steps/s3_aligned/util.c:evolve
1,342,506,280   26   26            80          80          59 1,342,504,960 20,976,640 20,976,640  ???:__intel_avx_rep_memset
  177,889,611  133  132    36,904,648          56          55    26,789,877     40,990     40,990  ???:__printf_fp
   57,675,625    7    7    19,136,278           0           0     8,918,042          5          5  ???:hack_digit.13549
   43,128,322   91   86     9,856,173         339         310    10,018,754        190        180  ???:vfprintf
   41,589,776    5    5     6,125,292           0           0     4,130,684          0          0  ???:__mpn_mul_1
   26,100,773   67   67     7,720,964       9,292       9,290     2,584,580      4,611      4,608  ???:_IO_vfscanf
   19,697,161    5    5     5,266,953           0           0     4,858,699         10         10  ???:__mpn_divrem
   18,740,564   54   54     2,628,836           4           4     1,380,234          3          0  ???:____strtod_l_internal

--------------------------------------------------------------------------------
-- Auto-annotated source: /lustre/home/d171/s1898201/PP_cw/MD_steps/s3_aligned/MD.c
--------------------------------------------------------------------------------
           Ir I1mr ILmr          Dr       D1mr       DLmr          Dw       D1mw       DLmw 

-- line 7 ----------------------------------------
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .  #include "coord.h"
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .  void visc_force(int N, double *f, double *vis, double *vel);
            .    .    .           .          .          .           .          .          .  void add_norm(int N, double *r, double *delta);
            .    .    .           .          .          .           .          .          .  double force(double W, double delta, double r);
            .    .    .           .          .          .           .          .          .  void wind_force(int N, double *f, double *vis, double vel);
            .    .    .           .          .          .           .          .          .  
           55    1    1           0          0          0          35          0          0  void evolve(int count, double dt) {
            .    .    .           .          .          .           .          .          .    int step;
            .    .    .           .          .          .           .          .          .    int i, j, k, l;
            .    .    .           .          .          .           .          .          .    int collided;
            .    .    .           .          .          .           .          .          .    double Size;
            .    .    .           .          .          .           .          .          .    /*
            .    .    .           .          .          .           .          .          .     * Loop over timesteps.
            .    .    .           .          .          .           .          .          .     */
           75    0    0           0          0          0           0          0          0    for (step = 1; step <= count; step++) {
           80    0    0           0          0          0          20         15         15      printf("timestep %d\n", step);
           85    0    0           5          5          0          20          0          0      printf("collisions %d\n", collisions);
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .      /* set the viscosity term in the force calculation */
          280    2    2           0          0          0           0          0          0      for (j = 0; j < Ndim; j++) {
            .    .    .           .          .          .           .          .          .        visc_force(Nbody, f[j], vis, velo[j]);
            .    .    .           .          .          .           .          .          .      }
            .    .    .           .          .          .           .          .          .      /* add the wind term in the force calculation */
            .    .    .           .          .          .           .          .          .      for (j = 0; j < Ndim; j++) {
      122,920    1    1     122,920     20,500         15           0          0          0        wind_force(Nbody, f[j], vis, wind[j]);
            .    .    .           .          .          .           .          .          .      }
            .    .    .           .          .          .           .          .          .      /* calculate distance from central mass */
           80    0    0           0          0          0          20         20          0      for (k = 0; k < Nbody; k++) {
            .    .    .           .          .          .           .          .          .        r[k] = 0.0;
            .    .    .           .          .          .           .          .          .      }
            .    .    .           .          .          .           .          .          .      for (i = 0; i < Ndim; i++) {
       81,920    2    2           0          0          0      81,920          0          0        add_norm(Nbody, r, pos[i]);
            .    .    .           .          .          .           .          .          .      }
       30,760    1    1           0          0          0           0          0          0      for (k = 0; k < Nbody; k++) {
       81,920    1    1      40,960     10,080          0      40,960          0          0        r[k] = sqrt(r[k]);
            .    .    .           .          .          .           .          .          .      }
            .    .    .           .          .          .           .          .          .      /* calculate central force */
       92,220    0    0           0          0          0           0          0          0      for (i = 0; i < Nbody; i++) {
          300    1    1          20         20          0           0          0          0        for (l = 0; l < Ndim; l++) {
      737,280    2    2     368,640     91,680          0     122,880          0          0          f[l][i] = f[l][i] - force(G * mass[i] * M_central, pos[l][i], r[i]);
            .    .    .           .          .          .           .          .          .        }
            .    .    .           .          .          .           .          .          .      }
            .    .    .           .          .          .           .          .          .      /* calculate pairwise separation of particles */
           20    0    0           0          0          0           0          0          0      k = 0;
      163,960    0    0           0          0          0          40         20          0      for (i = 0; i < Nbody; i++) {
   66,393,320   11   11           0          0          0           0          0          0        for (j = i + 1; j < Nbody; j++) {
      204,680    0    0           0          0          0           0          0          0          for (l = 0; l < Ndim; l++) {
  925,898,960   42   42 252,456,540 61,050,293          0 252,026,880 62,899,200 62,899,200            delta_pos[l][k] = pos[l][i] - pos[l][j];
            .    .    .           .          .          .           .          .          .          }
      306,740    0    0           0          0          0           0          0          0          k = k + 1;
            .    .    .           .          .          .           .          .          .        }
            .    .    .           .          .          .           .          .          .      }
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .      /* calculate norm of separation vector */
          120    5    5          40         20         20          20          0          0      for (k = 0; k < Npair; k++) {
            .    .    .           .          .          .           .          .          .        delta_r[k] = 0.0;
            .    .    .           .          .          .           .          .          .      }
            .    .    .           .          .          .           .          .          .      for (i = 0; i < Ndim; i++) {
  167,731,200    0    0           0          0          0 167,731,200          0          0        add_norm(Npair, delta_r, delta_pos[i]);
            .    .    .           .          .          .           .          .          .      }
  251,596,820    0    0           0          0          0           0          0          0      for (k = 0; k < Npair; k++) {
  167,731,200    0    0  83,865,600 20,966,400 20,966,400  83,865,600          0          0        delta_r[k] = sqrt(delta_r[k]);
            .    .    .           .          .          .           .          .          .      }
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .      /*
            .    .    .           .          .          .           .          .          .       * add pairwise forces.
            .    .    .           .          .          .           .          .          .       */
           20    0    0           0          0          0           0          0          0      k = 0;
      163,920    0    0          20         20         20           0          0          0      for (i = 0; i < Nbody; i++) {
  503,848,940    6    6           0          0          0           0          0          0        for (j = i + 1; j < Nbody; j++) {
  503,275,500    1    1 167,813,100 20,742,434     10,240           0          0          0          Size = radius[i] + radius[j];
  167,731,200    0    0           0          0          0           0          0          0          collided = 0;
            .    .    .           .          .          .           .          .          .          for (l = 0; l < Ndim; l++) {
            .    .    .           .          .          .           .          .          .            /*  flip force if close in */
1,174,200,300    0    0 167,731,200 20,966,400 20,966,400           0          0          0            if (delta_r[k] >= Size) {
1,006,387,200   10   10 503,193,600     27,500         60 503,193,600          0          0              f[l][i] = f[l][i] -
1,677,475,810    7    7 671,006,700 83,645,012 62,909,440           0          0          0                        force(G * mass[i] * mass[j], delta_pos[l][k], delta_r[k]);
1,341,849,600    0    0 503,193,600 62,016,204     30,660 503,193,600          0          0              f[l][j] = f[l][j] +
  503,193,600    0    0           0          0          0           0          0          0                        force(G * mass[i] * mass[j], delta_pos[l][k], delta_r[k]);
            .    .    .           .          .          .           .          .          .            } else {
            .    .    .           .          .          .           .          .          .              f[l][i] = f[l][i] +
            .    .    .           .          .          .           .          .          .                        force(G * mass[i] * mass[j], delta_pos[l][k], delta_r[k]);
            .    .    .           .          .          .           .          .          .              f[l][j] = f[l][j] -
            .    .    .           .          .          .           .          .          .                        force(G * mass[i] * mass[j], delta_pos[l][k], delta_r[k]);
            .    .    .           .          .          .           .          .          .              collided = 1;
            .    .    .           .          .          .           .          .          .            }
            .    .    .           .          .          .           .          .          .          }
  503,193,600    0    0           0          0          0           0          0          0          if (collided == 1) {
            .    .    .           .          .          .           .          .          .            collisions++;
            .    .    .           .          .          .           .          .          .          }
       81,900    0    0           0          0          0           0          0          0          k = k + 1;
            .    .    .           .          .          .           .          .          .        }
            .    .    .           .          .          .           .          .          .      }
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .      /* update positions */
       92,220    0    0           0          0          0           0          0          0      for (i = 0; i < Nbody; i++) {
          300    0    0          20         20         20           0          0          0        for (j = 0; j < Ndim; j++) {
      614,400    6    6     245,760     61,440     61,440     122,880          0          0          pos[j][i] = pos[j][i] + dt * velo[j][i];
            .    .    .           .          .          .           .          .          .        }
            .    .    .           .          .          .           .          .          .      }
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .      /* update velocities */
            .    .    .           .          .          .           .          .          .      for (i = 0; i < Nbody; i++) {
            .    .    .           .          .          .           .          .          .        for (j = 0; j < Ndim; j++) {
      614,400    3    3     245,760     61,440     24,420     122,880          0          0          velo[j][i] = velo[j][i] + dt * (f[j][i] / mass[i]);
            .    .    .           .          .          .           .          .          .        }
            .    .    .           .          .          .           .          .          .      }
            .    .    .           .          .          .           .          .          .    }
           40    0    0          35          5          5           0          0          0  }

--------------------------------------------------------------------------------
-- Auto-annotated source: /lustre/home/d171/s1898201/PP_cw/MD_steps/s3_aligned/util.c
--------------------------------------------------------------------------------
           Ir I1mr ILmr          Dr        D1mr        DLmr      Dw   D1mw  DLmw 

            .    .    .           .           .           .       .      .     .  #include <math.h>
            .    .    .           .           .           .       .      .     .  
            .    .    .           .           .           .       .      .     .  void visc_force(int N, double *f, double *vis, double *velo) {
            .    .    .           .           .           .       .      .     .    int i;
       92,220    0    0           0           0           0       0      0     0    for (i = 0; i < N; i++) {
      491,520    7    7     368,640      61,455       7,695 122,880 30,720 1,536      f[i] = -vis[i] * velo[i];
            .    .    .           .           .           .       .      .     .    }
            .    .    .           .           .           .       .      .     .  }
           40    0    0          20          20           0       0      0     0  void wind_force(int N, double *f, double *vis, double velo) {
            .    .    .           .           .           .       .      .     .    int i;
      276,520    1    1           0           0           0       0      0     0    for (i = 0; i < N; i++) {
      901,120    2    2     204,800      30,720           0 204,800      0     0      f[i] = f[i] - vis[i] * velo;
            .    .    .           .           .           .       .      .     .    }
            .    .    .           .           .           .       .      .     .  }
            .    .    .           .           .           .       .      .     .  void add_norm(int N, double *r, double *delta) {
            .    .    .           .           .           .       .      .     .    int k;
  503,255,160    1    1           0           0           0       0      0     0    for (k = 0; k < N; k++) {
  755,159,040    4    4 419,532,800 104,882,400 104,832,000       0      0     0      r[k] += (delta[k] * delta[k]);
            .    .    .           .           .           .       .      .     .    }
            .    .    .           .           .           .       .      .     .  }
            .    .    .           .           .           .       .      .     .  
            .    .    .           .           .           .       .      .     .  double force(double W, double delta, double r) {
1,845,657,600    3    3 167,854,080      30,720           0       0      0     0    return W * delta / (pow(r, 3.0));
            .    .    .           .           .           .       .      .     .  }

--------------------------------------------------------------------------------
Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw 
--------------------------------------------------------------------------------
87    6    6 97  100  100 52   75   75  percentage of events annotated

