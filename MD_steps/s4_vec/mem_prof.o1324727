Flags
CFLAGS= -g -Ofast -ipo\
changelog
# Change log

- Used flags
- Ststic attary
  - control 44 use temp to reduce calculation
  - control 107 i removed
  - OFFSET 64 <- 1324037 USED
  - OFFSET  0 <- 1324039
  - OFFSET 32 <- 1324134

- loop fusion
  - visc and wind merged <- bench_c.o1324440
  - new r, unroll, interchanges, merge <- bench_c.o1324469
  - central force, GM, interchange done by compiler
  - norm of separation vector, interchange, merge, unroll <- 1324567 48s
    - merge with airwise separation of particles <- 1324708 45s
  - position and velocity update, interchange, merged
  - add pairwise forces, interchange, conditionals <- 1324579 46s
    - if removed
    - f[l][i] moved out of j loop to reduce dependency

Final: 1324667 43s 
/*
 *  Simple molecular dynamics code.
 *
 */
#include <math.h>
#include <stdio.h>
#include <string.h>

#include "coord.h"

// void visc_force(int N, double *f, double *vis, double *vel);
void add_norm(int N, double *r, double *delta);
double force(double W, double delta, double r);
// void wind_force(int N, double *f, double *vis, double vel);
void new_force(int N, double *f, double *vis, double *velo, double wind);

void evolve(int count, double dt) {
  int step;
  int i, j, k, l;
  int collided;
  double Size, temp, tempForce, tempGmass, tempFLI[3];
  double delta_pos[Ndim][Npair + OFFSET] __attribute__((aligned(64)));
  double delta_r[Npair + OFFSET] __attribute__((aligned(64)));
  /*
   * Loop over timesteps.
   */
  for (step = 1; step <= count; step++) {
    printf("timestep %d\n", step);
    printf("collisions %d\n", collisions);

    memset(r, 0., sizeof(r));
    /* set the viscosity term in the force calculation */
    /* add the wind term in the force calculation */
    for (j = 0; j < Ndim; j++) {
      new_force(Nbody, f[j], vis, velo[j], wind[j]);
    }

    /* calculate distance from central mass */
    for (k = 0; k < Nbody; k++) {
      temp =
          pos[0][k] * pos[0][k] + pos[1][k] * pos[1][k] + pos[2][k] * pos[2][k];
      r[k] = sqrt(temp);
    }

    /* calculate central force */

    for (l = 0; l < Ndim; l++) {
      for (i = 0; i < Nbody; i++) {
        f[l][i] -= force(GM * mass[i], pos[l][i], r[i]);
      }
    }

    /* calculate pairwise separation of particles */
    for (l = 0; l < Ndim; l++) {
      k = 0;
      for (i = 0; i < Nbody; i++) {
        // #pragma ivdep
        for (j = i + 1; j < Nbody; j++) {
          delta_pos[l][k] = pos[l][i] - pos[l][j];
          k = k + 1;
        }
      }
    } 

    /* calculate norm of separation vector */
    for (k = 0; k < Npair; k++) {
      temp = delta_pos[0][k] * delta_pos[0][k] +
             delta_pos[1][k] * delta_pos[1][k] +
             delta_pos[2][k] * delta_pos[2][k];
      delta_r[k] = sqrt(temp);
    }

    /*
     * add pairwise forces.
     */
    k = 0;
    for (i = 0; i < Nbody; i++) {
      memset(tempFLI, 0.0, sizeof(tempFLI));
      for (j = i + 1; j < Nbody; j++) {
        collided = 0;
        Size = radius[i] + radius[j];
        tempGmass = G * mass[i] * mass[j];

        /*  flip force if close in */
        if (delta_r[k] >= Size) {
          for (l = 0; l < Ndim; l++) {
            tempForce = force(tempGmass, delta_pos[l][k], delta_r[k]);
            // f[l][i] = f[l][i] - tempForce;
            tempFLI[l] -= tempForce;
            f[l][j] += tempForce;
          }
        } else {
          for (l = 0; l < Ndim; l++) {
            tempForce = force(tempGmass, delta_pos[l][k], delta_r[k]);
            // f[l][i] = f[l][i] + tempForce;
            tempFLI[l] += tempForce;
            f[l][j] -= tempForce;
          }
          collisions++;
        }
        k = k + 1;
      }
      f[0][i] += tempFLI[0];
      f[1][i] += tempFLI[1];
      f[2][i] += tempFLI[2];
    }

    /* update positions */
    /* update velocities */
    for (j = 0; j < Ndim; j++) {
      for (i = 0; i < Nbody; i++) {
        pos[j][i] += dt * velo[j][i];
        velo[j][i] += dt * (f[j][i] / mass[i]);
      }
    }
  }
}
 
