--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         48234496 B, 64 B, 23-way associative
Command:          ./MD 4
Data file:        report/cachegrind.out
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
           Ir  I1mr  ILmr            Dr        D1mr        DLmr          Dw       D1mw       DLmw 
--------------------------------------------------------------------------------
8,844,913,036 1,968 1,936 2,116,912,381 295,455,346 146,946,512 908,050,707 84,118,309 83,930,253  PROGRAM TOTALS

--------------------------------------------------------------------------------
           Ir I1mr ILmr            Dr        D1mr        DLmr          Dw       D1mw       DLmw  file:function
--------------------------------------------------------------------------------
7,211,456,730   54   54 2,015,149,840 295,363,537 146,929,700 840,151,195 84,024,375 83,865,640  /lustre/home/d171/s1898201/PP_cw/MD_steps/s4_vec/MD.c:evolve
1,175,152,820   16   16       286,780      41,040          30     122,880     30,720      1,536  /lustre/home/d171/s1898201/PP_cw/MD_steps/s4_vec/util.c:evolve
  177,889,618  126  125    36,904,648          56          55  26,789,876     40,990     40,990  ???:__printf_fp
   57,675,615    7    7    19,136,274           0           0   8,918,038          5          5  ???:hack_digit.13549
   43,128,322   87   82     9,856,173         339         310  10,018,754        160        150  ???:vfprintf
   41,589,776    4    4     6,125,292           0           0   4,130,684          0          0  ???:__mpn_mul_1
   26,100,773   67   67     7,720,964       9,292       9,290   2,584,580      4,611      4,608  ???:_IO_vfscanf
   19,697,117    9    9     5,266,946           0           0   4,858,692         10         10  ???:__mpn_divrem
   18,740,564   54   54     2,628,836           4           4   1,380,234          3          0  ???:____strtod_l_internal
   13,544,963   13   13     3,339,836           0           0   2,745,580         21         20  ???:_IO_file_xsputn@@GLIBC_2.2.5

--------------------------------------------------------------------------------
-- Auto-annotated source: /lustre/home/d171/s1898201/PP_cw/MD_steps/s4_vec/util.c
--------------------------------------------------------------------------------
           Ir I1mr ILmr      Dr   D1mr DLmr      Dw   D1mw  DLmw 

-- line 15 ----------------------------------------
            .    .    .       .      .    .       .      .     .  void add_norm(int N, double *r, double *delta) {
            .    .    .       .      .    .       .      .     .    int k;
            .    .    .       .      .    .       .      .     .    for (k = 0; k < N; k++) {
            .    .    .       .      .    .       .      .     .      r[k] += (delta[k] * delta[k]);
            .    .    .       .      .    .       .      .     .    }
            .    .    .       .      .    .       .      .     .  }
            .    .    .       .      .    .       .      .     .  
            .    .    .       .      .    .       .      .     .  double force(double W, double delta, double r) {
1,174,323,200    6    6  40,960 10,240    0       0      0     0    return W * delta / (pow(r, 3.0));
            .    .    .       .      .    .       .      .     .  }
            .    .    .       .      .    .       .      .     .  
          120    2    2      60     60   15       0      0     0  void new_force(int N, double *f, double *vis, double *velo, double wind) {
            .    .    .       .      .    .       .      .     .    int i;
            .    .    .       .      .    .       .      .     .  #pragma ivdep
            .    .    .       .      .    .       .      .     .  #pragma vector aligned
       92,220    1    1       0      0    0       0      0     0    for (i = 0; i < N; i++) {
      737,280    7    7 245,760 30,740   15 122,880 30,720 1,536      f[i] = -vis[i] * velo[i] - vis[i] * wind;
            .    .    .       .      .    .       .      .     .    }
            .    .    .       .      .    .       .      .     .  }
--------------------------------------------------------------------------------
-- Auto-annotated source: /lustre/home/d171/s1898201/PP_cw/MD_steps/s4_vec/MD.c
--------------------------------------------------------------------------------
           Ir I1mr ILmr          Dr       D1mr       DLmr          Dw       D1mw       DLmw 

-- line 9 ----------------------------------------
            .    .    .           .          .          .           .          .          .  #include "coord.h"
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .  // void visc_force(int N, double *f, double *vis, double *vel);
            .    .    .           .          .          .           .          .          .  void add_norm(int N, double *r, double *delta);
            .    .    .           .          .          .           .          .          .  double force(double W, double delta, double r);
            .    .    .           .          .          .           .          .          .  // void wind_force(int N, double *f, double *vis, double vel);
            .    .    .           .          .          .           .          .          .  void new_force(int N, double *f, double *vis, double *velo, double wind);
            .    .    .           .          .          .           .          .          .  
           55    1    1           0          0          0          35          0          0  void evolve(int count, double dt) {
            .    .    .           .          .          .           .          .          .    int step;
            .    .    .           .          .          .           .          .          .    int i, j, k, l;
            .    .    .           .          .          .           .          .          .    int collided;
            .    .    .           .          .          .           .          .          .    double Size, temp, tempForce, tempGmass, tempFLI[3];
            .    .    .           .          .          .           .          .          .    // double delta_pos[Ndim][Npair + OFFSET] __attribute__((aligned(64)));
            .    .    .           .          .          .           .          .          .    // double delta_r[Npair + OFFSET] __attribute__((aligned(64)));
            .    .    .           .          .          .           .          .          .    /*
            .    .    .           .          .          .           .          .          .     * Loop over timesteps.
            .    .    .           .          .          .           .          .          .     */
           75    0    0           0          0          0           0          0          0    for (step = 1; step <= count; step++) {
           80    0    0           0          0          0          20         15          0      printf("timestep %d\n", step);
           85    0    0           5          5          0          20          0          0      printf("collisions %d\n", collisions);
            .    .    .           .          .          .           .          .          .  
           80    0    0           0          0          0          20          0          0      memset(r, 0., sizeof(r));
            .    .    .           .          .          .           .          .          .      /* set the viscosity term in the force calculation */
            .    .    .           .          .          .           .          .          .      /* add the wind term in the force calculation */
          280    0    0           0          0          0           0          0          0      for (j = 0; j < Ndim; j++) {
      122,880    0    0     122,880     30,720      7,680           0          0          0        new_force(Nbody, f[j], vis, velo[j], wind[j]);
            .    .    .           .          .          .           .          .          .      }
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .      /* calculate distance from central mass */
      122,920    0    0          20         20          0           0          0          0      for (k = 0; k < Nbody; k++) {
            .    .    .           .          .          .           .          .          .        temp =
      450,560    1    1     122,880     30,720          0           0          0          0            pos[0][k] * pos[0][k] + pos[1][k] * pos[1][k] + pos[2][k] * pos[2][k];
       81,920    0    0           0          0          0      40,960     10,240          0        r[k] = sqrt(temp);
            .    .    .           .          .          .           .          .          .      }
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .      /* calculate central force */
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .      for (l = 0; l < Ndim; l++) {
            .    .    .           .          .          .           .          .          .        for (i = 0; i < Nbody; i++) {
      450,560    1    1     122,880     30,720          0     122,880          0          0          f[l][i] -= force(GM * mass[i], pos[l][i], r[i]);
            .    .    .           .          .          .           .          .          .        }
            .    .    .           .          .          .           .          .          .      }
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .      /* calculate pairwise separation of particles */
          440    1    1          20          0          0          60         20          0      for (l = 0; l < Ndim; l++) {
           60    0    0           0          0          0           0          0          0        k = 0;
      491,820    1    1          60         60         60          60          0          0        for (i = 0; i < Nbody; i++) {
            .    .    .           .          .          .           .          .          .          // #pragma ivdep
  198,319,740    2    2           0          0          0           0          0          0          for (j = i + 1; j < Nbody; j++) {
  884,609,040    5    5 252,456,540 44,656,644     20,480 252,026,880 62,899,200 62,899,200            delta_pos[l][k] = pos[l][i] - pos[l][j];
      920,220    0    0           0          0          0           0          0          0            k = k + 1;
            .    .    .           .          .          .           .          .          .          }
            .    .    .           .          .          .           .          .          .        }
            .    .    .           .          .          .           .          .          .      } 
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .      /* calculate norm of separation vector */
  251,596,920    0    0          40          0          0           0          0          0      for (k = 0; k < Npair; k++) {
  167,731,200    1    1  83,865,600 20,966,400 20,966,400           0          0          0        temp = delta_pos[0][k] * delta_pos[0][k] +
  251,596,815    1    1  83,865,600 20,966,400 20,966,400           0          0          0               delta_pos[1][k] * delta_pos[1][k] +
  251,596,800    0    0  83,865,600 20,966,400 20,966,400           0          0          0               delta_pos[2][k] * delta_pos[2][k];
  167,731,200    0    0           0          0          0  83,865,600 20,966,400 20,966,400        delta_r[k] = sqrt(temp);
            .    .    .           .          .          .           .          .          .      }
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .      /*
            .    .    .           .          .          .           .          .          .       * add pairwise forces.
            .    .    .           .          .          .           .          .          .       */
           20    0    0           0          0          0           0          0          0      k = 0;
      163,940    1    1          20         20         20           0          0          0      for (i = 0; i < Nbody; i++) {
      245,760    0    0           0          0          0     163,840         40         40        memset(tempFLI, 0.0, sizeof(tempFLI));
  503,767,020    7    7           0          0          0           0          0          0        for (j = i + 1; j < Nbody; j++) {
            .    .    .           .          .          .           .          .          .          collided = 0;
  503,275,500    0    0 167,813,100 20,737,813     10,240           0          0          0          Size = radius[i] + radius[j];
  335,626,200    5    5 167,813,100 20,740,712     10,240           0          0          0          tempGmass = G * mass[i] * mass[j];
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .          /*  flip force if close in */
  671,006,700    0    0 167,731,200 20,966,400 20,966,400           0          0          0          if (delta_r[k] >= Size) {
            .    .    .           .          .          .           .          .          .            for (l = 0; l < Ndim; l++) {
1,006,387,200    0    0 503,193,600 62,899,200 62,899,200           0          0          0              tempForce = force(tempGmass, delta_pos[l][k], delta_r[k]);
            .    .    .           .          .          .           .          .          .              // f[l][i] = f[l][i] - tempForce;
  503,685,060    5    5     245,760          0          0     245,700    148,460          0              tempFLI[l] -= tempForce;
1,509,580,800    5    5 503,193,600 62,029,436     30,720 503,193,600          0          0              f[l][j] += tempForce;
            .    .    .           .          .          .           .          .          .            }
            .    .    .           .          .          .           .          .          .          } else {
            .    .    .           .          .          .           .          .          .            for (l = 0; l < Ndim; l++) {
            .    .    .           .          .          .           .          .          .              tempForce = force(tempGmass, delta_pos[l][k], delta_r[k]);
            .    .    .           .          .          .           .          .          .              // f[l][i] = f[l][i] + tempForce;
            .    .    .           .          .          .           .          .          .              tempFLI[l] += tempForce;
            .    .    .           .          .          .           .          .          .              f[l][j] -= tempForce;
            .    .    .           .          .          .           .          .          .            }
            .    .    .           .          .          .           .          .          .            collisions++;
            .    .    .           .          .          .           .          .          .          }
       81,900    0    0           0          0          0           0          0          0          k = k + 1;
            .    .    .           .          .          .           .          .          .        }
      163,840    0    0      81,920     72,662          0      81,920          0          0        f[0][i] += tempFLI[0];
      163,840    0    0      81,920     72,660          0      81,920          0          0        f[1][i] += tempFLI[1];
      163,840    0    0      81,920     73,640          0      81,920          0          0        f[2][i] += tempFLI[2];
            .    .    .           .          .          .           .          .          .      }
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .      /* update positions */
            .    .    .           .          .          .           .          .          .      /* update velocities */
          300    1    1          20         20         20           0          0          0      for (j = 0; j < Ndim; j++) {
       92,220    0    0           0          0          0           0          0          0        for (i = 0; i < Nbody; i++) {
      614,400    6    6     245,760     61,440     61,440     122,880          0          0          pos[j][i] += dt * velo[j][i];
      614,400   10   10     245,760     61,440     24,000     122,880          0          0          velo[j][i] += dt * (f[j][i] / mass[i]);
            .    .    .           .          .          .           .          .          .        }
            .    .    .           .          .          .           .          .          .      }
            .    .    .           .          .          .           .          .          .    }
           40    0    0          35          5          0           0          0          0  }

--------------------------------------------------------------------------------
Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw 
--------------------------------------------------------------------------------
95    4    4 95  100  100 93  100  100  percentage of events annotated

