Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.5.274 Build 20180823

Compiler options: -g -Ofast -ipo -no-prec-div -no-prec-sqrt -Wall -Winline -pg -o MD -lm -qopt-report-file=report/ipo.optout -qopt-report=5

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: true
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: true
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: true

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: disabled
  -inline-max-per-compile: disabled

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/6=16.7%] control.c(16,34)
  -> INLINE (MANUAL): (30,13) atoi(const char *) (isz = 4) (sz = 11)
    -> EXTERN: /usr/include/stdlib.h:(280,16) strtol(const char *__restrict__, char **__restrict__, int)
  -> EXTERN: (39,8) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (42,5) perror(const char *)
  -> EXTERN: (43,5) exit(int)
  -> EXTERN: (47,5) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (52,3) fclose(FILE *)
  -> INLINE: (58,12) second() (isz = 9) (sz = 14)
    -> EXTERN: (91,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> INLINE: (60,13) second() (isz = 9) (sz = 14)
    -> EXTERN: (91,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> (61,5) evolve(int, double) (isz = 359) (sz = 366)
     [[ Inlining would exceed -inline-max-size value (366>230) <1>]]
  -> INLINE: (62,12) second() (isz = 9) (sz = 14)
    -> EXTERN: (91,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (63,5) printf(const char *__restrict__, ...)
  -> EXTERN: (64,5) printf(const char *__restrict__, ...)
  -> EXTERN: (67,5) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (68,11) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (71,7) perror(const char *)
  -> EXTERN: (72,7) exit(int)
  -> EXTERN: (76,7) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (81,5) fclose(FILE *)
  -> INLINE: (83,11) second() (isz = 9) (sz = 14)
    -> EXTERN: (91,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (84,3) printf(const char *__restrict__, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at control.c(46,3)
   remark #15527: loop was not vectorized: function call to fscanf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ control.c(47,5) ]
LOOP END

LOOP BEGIN at control.c(59,3)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ control.c(72,7) ]

   LOOP BEGIN at control.c(75,5)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ control.c(76,7) ]
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

control.c(16,34):remark #34051: REGISTER ALLOCATION : [main] control.c:16

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     142
            Global    :      37
            Local     :     105
        Regenerable   :      57
        Spilled       :       7
        
    Routine stack
        Variables     :     180 bytes*
            Reads     :      10 [1.62e+01 ~ 0.0%]
            Writes    :       2 [2.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       3 [3.70e+00 ~ 0.0%]
            Writes    :       3 [4.81e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: evolve(int, double)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (evolve(int, double)) [2/6=33.3%] MD.c(14,35)
  -> EXTERN: (23,5) printf(const char *__restrict__, ...)
  -> INLINE: (29,7) new_force(int, double *, double *, double *, double) (isz = 23) (sz = 36)
  -> INLINE: (39,18) force(double, double, double) (isz = 3) (sz = 14)
    -> EXTERN: util.c:(23,23) pow(double, double)
  -> INLINE: (40,18) force(double, double, double) (isz = 3) (sz = 14)
    -> EXTERN: util.c:(23,23) pow(double, double)
  -> INLINE: (41,18) force(double, double, double) (isz = 3) (sz = 14)
    -> EXTERN: util.c:(23,23) pow(double, double)
  -> EXTERN: (80,7) memset(void *, int, size_t)
  -> INLINE: (88,25) force(double, double, double) (isz = 3) (sz = 14)
    -> EXTERN: util.c:(23,23) pow(double, double)
  -> INLINE: (95,25) force(double, double, double) (isz = 3) (sz = 14)
    -> EXTERN: util.c:(23,23) pow(double, double)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at MD.c(22,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at MD.c(28,5)
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25452: Original Order found to be proper, but by a close margin
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at util.c(30,3) inlined into MD.c(29,7)
         remark #15388: vectorization support: reference &f[j][i] has aligned access   [ util.c(31,5) ]
         remark #15388: vectorization support: reference vis[i] has aligned access   [ MD.c(29,30) ]
         remark #15388: vectorization support: reference &velo[j][i] has aligned access   [ util.c(31,22) ]
         remark #15388: vectorization support: reference vis[i] has aligned access   [ MD.c(29,30) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.042
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 3 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 13 
         remark #15477: vector cost: 6.000 
         remark #15478: estimated potential speedup: 2.160 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=512
      LOOP END
   LOOP END

   LOOP BEGIN at MD.c(33,5)
      remark #15388: vectorization support: reference pos[0][k] has aligned access   [ MD.c(35,11) ]
      remark #15388: vectorization support: reference pos[0][k] has aligned access   [ MD.c(35,23) ]
      remark #15388: vectorization support: reference pos[1][k] has aligned access   [ MD.c(35,35) ]
      remark #15388: vectorization support: reference pos[1][k] has aligned access   [ MD.c(35,47) ]
      remark #15388: vectorization support: reference pos[2][k] has aligned access   [ MD.c(35,59) ]
      remark #15388: vectorization support: reference pos[2][k] has aligned access   [ MD.c(35,71) ]
      remark #15388: vectorization support: reference mass[k] has aligned access   [ MD.c(38,24) ]
      remark #15388: vectorization support: reference f[0][k] has aligned access   [ MD.c(39,7) ]
      remark #15388: vectorization support: reference f[0][k] has aligned access   [ MD.c(39,7) ]
      remark #15388: vectorization support: reference pos[0][k] has aligned access   [ MD.c(39,35) ]
      remark #15388: vectorization support: reference f[1][k] has aligned access   [ MD.c(40,7) ]
      remark #15388: vectorization support: reference f[1][k] has aligned access   [ MD.c(40,7) ]
      remark #15388: vectorization support: reference pos[1][k] has aligned access   [ MD.c(40,35) ]
      remark #15388: vectorization support: reference f[2][k] has aligned access   [ MD.c(41,7) ]
      remark #15388: vectorization support: reference f[2][k] has aligned access   [ MD.c(41,7) ]
      remark #15388: vectorization support: reference pos[2][k] has aligned access   [ MD.c(41,35) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.060
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 7 
      remark #15449: unmasked aligned unit stride stores: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 190 
      remark #15477: vector cost: 100.000 
      remark #15478: estimated potential speedup: 1.890 
      remark #15486: divides: 3 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=2048
   LOOP END

   LOOP BEGIN at MD.c(54,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=4160

      LOOP BEGIN at MD.c(56,7)
      <Distributed chunk1>
         remark #25426: Loop Distributed (2 way) 
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.750
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 1 
         remark #15477: vector cost: 0.250 
         remark #15478: estimated potential speedup: 3.890 
         remark #15488: --- end vector cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
         remark #25015: Estimate of max trip count of loop=4160
      LOOP END

      LOOP BEGIN at MD.c(56,7)
      <Peeled loop for vectorization, Distributed chunk2>
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 6
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at MD.c(56,7)
      <Distributed chunk2>
         remark #15388: vectorization support: reference delta_pos[0][k] has aligned access   [ MD.c(57,9) ]
         remark #15388: vectorization support: reference pos[0][j] has aligned access   [ MD.c(57,39) ]
         remark #15388: vectorization support: reference delta_pos[1][k] has aligned access   [ MD.c(58,9) ]
         remark #15388: vectorization support: reference pos[1][j] has aligned access   [ MD.c(58,39) ]
         remark #15388: vectorization support: reference delta_pos[2][k] has aligned access   [ MD.c(59,9) ]
         remark #15388: vectorization support: reference pos[2][j] has aligned access   [ MD.c(59,39) ]
         remark #15388: vectorization support: reference delta_r[k] has aligned access   [ MD.c(64,9) ]
         remark #15388: vectorization support: reference delta_pos[0][k] has aligned access   [ MD.c(61,16) ]
         remark #15388: vectorization support: reference delta_pos[0][k] has aligned access   [ MD.c(61,34) ]
         remark #15388: vectorization support: reference delta_pos[1][k] has aligned access   [ MD.c(62,16) ]
         remark #15388: vectorization support: reference delta_pos[1][k] has aligned access   [ MD.c(62,34) ]
         remark #15388: vectorization support: reference delta_pos[2][k] has aligned access   [ MD.c(63,16) ]
         remark #15388: vectorization support: reference delta_pos[2][k] has aligned access   [ MD.c(63,34) ]
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.323
         remark #15301: PARTIAL LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 6 
         remark #15449: unmasked aligned unit stride stores: 4 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 76 
         remark #15477: vector cost: 31.000 
         remark #15478: estimated potential speedup: 2.440 
         remark #15488: --- end vector cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 6
         remark #25015: Estimate of max trip count of loop=2080
      LOOP END

      LOOP BEGIN at MD.c(56,7)
      <Alternate Alignment Vectorized Loop, Distributed chunk2>
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 6
         remark #25015: Estimate of max trip count of loop=2080
      LOOP END

      LOOP BEGIN at MD.c(56,7)
      <Remainder loop for vectorization, Distributed chunk2>
         remark #25015: Estimate of max trip count of loop=4160
      LOOP END
   LOOP END

   LOOP BEGIN at MD.c(79,5)
      remark #15382: vectorization support: call to function memset(void *, int, size_t) cannot be vectorized   [ MD.c(80,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between tempFLI (80:7) and f[2][i] (106:7)
      remark #15346: vector dependence: assumed OUTPUT dependence between f[2][i] (106:7) and tempFLI (80:7)
      remark #25015: Estimate of max trip count of loop=4160

      LOOP BEGIN at MD.c(81,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between tempFLI[l] (90:13) and tempFLI[l] (97:13)
         remark #15346: vector dependence: assumed OUTPUT dependence between tempFLI[l] (97:13) and tempFLI[l] (90:13)
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
         remark #25015: Estimate of max trip count of loop=4160

         LOOP BEGIN at MD.c(87,16)
            remark #25436: completely unrolled by 3   (pre-vector) 
         LOOP END

         LOOP BEGIN at MD.c(94,16)
            remark #25436: completely unrolled by 3   (pre-vector) 
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at MD.c(111,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at MD.c(112,7)
         remark #15388: vectorization support: reference pos[j][i] has aligned access   [ MD.c(113,9) ]
         remark #15388: vectorization support: reference pos[j][i] has aligned access   [ MD.c(113,9) ]
         remark #15388: vectorization support: reference velo[j][i] has aligned access   [ MD.c(113,27) ]
         remark #15388: vectorization support: reference velo[j][i] has aligned access   [ MD.c(114,9) ]
         remark #15388: vectorization support: reference velo[j][i] has aligned access   [ MD.c(114,9) ]
         remark #15388: vectorization support: reference f[j][i] has aligned access   [ MD.c(114,29) ]
         remark #15388: vectorization support: reference mass[i] has aligned access   [ MD.c(114,39) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 5 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 47 
         remark #15477: vector cost: 25.500 
         remark #15478: estimated potential speedup: 1.840 
         remark #15486: divides: 1 
         remark #15488: --- end vector cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 4
         remark #25015: Estimate of max trip count of loop=512
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

MD.c(80,7):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (16, 0)
MD.c(14,35):remark #34051: REGISTER ALLOCATION : [evolve] MD.c:14

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   28[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm13]
        
    Routine temporaries
        Total         :     269
            Global    :      73
            Local     :     196
        Regenerable   :      17
        Spilled       :       8
        
    Routine stack
        Variables     :      24 bytes*
            Reads     :       3 [6.13e+04 ~ 0.0%]
            Writes    :       5 [9.61e+04 ~ 0.0%]
        Spills        :      56 bytes*
            Reads     :       7 [1.86e+01 ~ 0.0%]
            Writes    :       7 [3.60e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: force(double, double, double)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (force(double, double, double)) util.c(22,48)

===========================================================================

Begin optimization report for: new_force(int, double *, double *, double *, double)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (new_force(int, double *, double *, double *, double)) util.c(26,74)

===========================================================================

Begin optimization report for: second()

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (second()) control.c(87,17)

===========================================================================

    Report from: Profile guided optimizations [pgo]



Profile feedback used a statically estimated profile for the following routines:

  File: MD.c
        evolve(int, double)[Line    14]

  File: control.c
        main(int, char **) [Line    16]


  0 out of 2 routine(s) used training profile data for PGO feedback
  0 out of 2 routine(s) were unable to use training profile data for PGO feedback
  0 out of 2 routine(s) were unable to find training profile data for PGO feedback
  2 out of 2 routine(s) used a static estimate profile for PGO feedback




    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The function is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any function that would
    normally be inlined, add "inline __attribute__((always_inline))" to the
    declaration of the called function, or add "#pragma forceinline" before
    the call site.

